// Create function to adjust color of dot according to YEAR ESTABLISHED.
// Color palette generated by: https://hihayk.github.io/scale/#10/10/50/50/-51/74/20/25/FF9C00/255/151/0/white.
function dotColor(yearFounded) {
  if (yearFounded >= 1620 && yearFounded < 1640) {
    color = "#51800B";
  }
  if (yearFounded >= 1640 && yearFounded < 1660) {
    color = "#638B0D";
  }
  if (yearFounded >= 1660 && yearFounded < 1680) {
    color = "#638B0D";
  }
  if (yearFounded >= 1680 && yearFounded < 1700) {
    color = "#76970F";
  }
  if (yearFounded >= 1700 && yearFounded < 1720) {
    color = "#8BA212";
  }
  if (yearFounded >= 1720 && yearFounded < 1740) {
    color = "#A0AE15";
  }
  if (yearFounded >= 1740 && yearFounded < 1760) {
    color = "#B7BA18";
  }
  if (yearFounded >= 1760 && yearFounded < 1780) {
    color = "#C5C51B";
  }
  if (yearFounded >= 1780 && yearFounded < 1800) {
    color = "#D1CA1F";
  }
  if (yearFounded >= 1800 && yearFounded < 1820) {
    color = "#DCC423";
  }
  if (yearFounded >= 1820 && yearFounded < 1840) {
    color = "#E8BE26";
  }
  if (yearFounded >= 1840 && yearFounded < 1860) {
    color = "#FF8A3F";
  }
  if (yearFounded >= 1860 && yearFounded < 1880) {
    color = "#FF7A47";
  }
  if (yearFounded >= 1880 && yearFounded < 1900) {
    color = "#FF6C4F";
  }
  if (yearFounded >= 1900 && yearFounded < 1920) {
    color = "#FF6057";
  }
  if (yearFounded >= 1920 && yearFounded < 1940) {
    color = "#FF606A";
  }
  if (yearFounded >= 1940 && yearFounded < 1960) {
    color = "#FF6884";
  }
  if (yearFounded >= 1960 && yearFounded < 1980) {
    color = "#FF719C";
  }
  if (yearFounded >= 1980 && yearFounded < 2000) {
    color = "#FF7AB3";
  }
  if (yearFounded >= 2000 && yearFounded < 2020) {
    color = "#FF83C8";
  }
  if (yearFounded >= 2020 && yearFounded < 2040) {
    color = "#FF8DDA";
  };
  return color;
};


// Store API endpoint as queryUrl.
let queryUrl = "http://127.0.0.1:5000/templates/appNotes.json";
let q2 = "http://127.0.0.1:5000/api/v1.0/data";

// function getFeature(data_info){
//   return
// }

// Perform a GET request to the query URL.
d3.json(queryUrl).then(data => {
  // Upon response, send the data.features object to the createFeatures function.
  createFeatures(data.features);
  // console.log("We have completed the create Features with this data:" + data.features) 
});


function createFeatures(schoolData) {
  // Define function to run for each feature in the features array.
  // Create a popup for each feature describing data.
  var all_features = []
  for (i in schoolData) {
    var geojsonfeature = {
      'type': 'Feature',
      'properties': {
        'rank': schoolData[i].Rank_USNewsWorldReport,
        'name': schoolData[i].Name,
        'location': schoolData[i].city + ", " + schoolData[i].state_code,
        'year_founded': schoolData[i].yearFounded,
        'website': schoolData[i].website,
      },
      'geometry': {
        'type': 'Point',
        'coordinates': [schoolData[i].latitude, schoolData[i].longitude]
      }
    }
    all_features.push(geojsonfeature)
  }

  function onEachFeature(feature, layer) {
    layer.bindPopup("Rank: " + feature.properties.rank + "<br>Name: " + feature.properties.name + "<br>Location: " + feature.properties.location + '<br> <a href="' + feature.properties.website + '" target="_blank" rel="noopener noreferrer">' +  feature.properties.website + "</a>");
  }

  // Create a GeoJSON layer containing the features array on the schoolData.
  // Run onEachFeature once for each return on school data.
  var schools_founded = L.geoJSON(all_features, {
    onEachFeature: onEachFeature,
    pointToLayer: function (feature) {
      return L.circleMarker(feature.geometry.coordinates, {
        opacity: 1,
        fillOpacity: 0.5,
        fillColor: dotColor(feature.properties.year_founded),
        color: "#000000",
        radius: 10,
        stroke: true,
        weight: 0.3
      }
      )
    }
  });

  // Send quakes layer to createMap function.
  createMap(schools_founded);
}

function createMap(schools_founded) {

  // Create base layer.
  var streetMap = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  })

  var topoMap = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
    attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
  });

  // Create baseMaps object.
  var baseMaps = {
    "Street Map": streetMap,
    "Topographic Map": topoMap
  };

  // Create overlay object.
  var overlayMap = {
    schools_founded: schools_founded
  };

  // Create map to load with streetmap and school data layer, centered on geographic center of United States.
  var loadMap = L.map("map", {
    center: [
      44.58, -103.46
    ],
    zoom: 5,
    layers: [streetMap, schools_founded]
  });

  // Create a layer control and connect to the base and overlay maps.
  L.control.layers(baseMaps, overlayMap).addTo(loadMap);

  // Create map legend.
  var legend = L.control({ position: "bottomright" });
  legend.onAdd = function () {
    var div = L.DomUtil.create("div", "info legend");
    schools_founded = [1620, 1640, 1660, 1680, 1700, 1720, 1740, 1760, 1780, 1800, 1820, 1840, 1860, 1880, 1900, 1920, 1940, 1960, 1980, 2000, 2020, 2040];
    var colors = ["#51800B", "#638B0D", "#638B0D", "#76970F", "#8BA212", "#A0AE15", "#B7BA18", "#C5C51B", "#D1CA1F", "#DCC423", "#E8BE26", "#FF8A3F", "#FF7A47", "#FF6C4F", "#FF6057", "#FF606A", "#FF6884", "#FF6884", "#FF719C", "#FF7AB3", "#FF83C8", "#FF8DDA"]
    var labels = [];

    // Define minimum and maximum values.
    var legendLimits = "<h2 style='text-align: center'>Best Colleges</h2><h3 style='text-align: center'>Year Founded</h3>" +
      "<div class=\"labels\">" +
      "<div class=\"min\">" + schools_founded[0] + "</div>" +
      "<div class=\"max\">" + schools_founded[schools_founded.length - 1] + "</div>" +
      "</div>";

    div.innerHTML = legendLimits;

    schools_founded.forEach(function (schools_founded, index) {
      labels.push("<li style=\"background-color: " + colors[index] + "\"></li>");
    });

    div.innerHTML += "<ul>" + labels.join("") + "</ul>";
    return div;
  };

  // Add legend to map.
  legend.addTo(loadMap);
}
